{"version":3,"sources":["components/Search/Search.js","components/Header/Header.js","components/QuestionCard/Card.js","components/Results/Results.js","components/Homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Search","updateSearch","e","preventDefault","setState","target","name","value","submit","props","history","push","state","category","minDate","maxDate","getQuestions","className","onSubmit","this","type","placeholder","onChange","htmlFor","Component","Header","Card","question","answer","airDate","class","substring","Results","results","undefined","length","map","result","title","airdate","toString","Homepage","to","style","color","fontSize","App","queryString","checkVal","checkCategory","checkMinDate","checkMaxDate","fetch","then","response","json","data","catch","basename","process","path","exact","strict","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08d5fda1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Search.css';\n\nexport default class Search extends Component {\n    constructor() {\n        super();\n        this.state = {\n            value: '',\n            category: '',\n            minDate: '',\n            maxDate: ''\n        }\n    }\n\n    updateSearch = (e) => {\n        e.preventDefault();\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        this.props.history.push(`value=${this.state.value}&category=${this.state.category}&min_date=${this.state.minDate}&max_date=${this.state.maxDate}`);\n        const { value, category, minDate, maxDate } = this.state;\n        this.props.getQuestions(value, category, minDate, maxDate);\n    }\n\n    render() {\n        return (\n            <div className=\"outerContainer\">\n                <form onSubmit={this.submit}>\n                    <div className=\"inputs\">\n                        <div className=\"searchDiv\">\n                            <input className=\"search\" name=\"value\" type=\"text\" placeholder=\"Value of Question\" onChange={this.updateSearch}></input>\n                            <label htmlFor=\"value\">Value of Question</label>\n                        </div>\n                        <div className=\"searchDiv\">\n                            <input className=\"search\" name=\"category\" type=\"text\" placeholder=\"Category ID\" onChange={this.updateSearch}></input>\n                            <label htmlFor=\"category\">Category ID</label>\n                        </div>\n                        <div className=\"searchDiv\">\n                            <input className=\"search\" name=\"minDate\" type=\"text\" placeholder=\"Earliest Date\" onChange={this.updateSearch}></input>\n                            <label htmlFor=\"minDate\">Earliest Date</label>\n                        </div>\n                        <div className=\"searchDiv\">\n                            <input className=\"search\" name=\"maxDate\" type=\"text\" placeholder=\"Latest Date\" onChange={this.updateSearch}></input>\n                            <label htmlFor=\"maxDate\">Latest Date</label>\n                        </div>\n                    </div>\n                    <input type=\"submit\" className=\"submitButton\" value=\"Search\"/>\n                </form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"logo\">\n                <h2><a className=\"htext\">Vraj's</a> Trivia Search</h2>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './Card.css';\n\nexport default class Card extends Component {\n    constructor() {\n        super()\n        this.state = {\n            value: '',\n            category: '',\n            question: '',\n            answer: '',\n            airDate: ''\n        }\n    }\n    \n    render () {\n        return (\n            <div className=\"card\">\n                <table class=\"table\">\n                    <tbody class=\"tableBody\">\n                        <tr>\n                            <td><strong>Difficulty</strong></td>\n                            <td>{this.props.value}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Category</strong></td>\n                            <td>{this.props.category}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Question</strong></td>\n                            <td>{this.props.question}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Answer</strong></td>\n                            <td>{this.props.answer}</td>\n                        </tr>\n                        <tr>\n                            <td><strong>Air Date</strong></td>\n                            <td>{this.props.airDate.substring(0, 10)}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Card from '../QuestionCard/Card';\nimport './Results.css';\n\nconst Results = ({ results }) => {\n    if (results === 'none' || results === undefined) {\n        return (null);\n    }\n\n    if (results.length === 0) {\n        return (\n            <div>\n                <p>No Questions Found</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"resultsDiv\">\n            {results.map((result) => {\n                return (\n                    <Card value={result.value} category={result.category.title} question={result.question} answer={result.answer} airDate={(result.airdate+\"\").toString()} />\n                );\n            })}\n        </div>\n    )\n}\n\nexport default Results;","import React from 'react';\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\r\nimport './Homepage.css';\r\n\r\nconst Homepage = () => {\r\n    return (\r\n        <div className=\"mainDiv\">\r\n            <div className=\"header\">\r\n                <h1> Welcome to Trivia Search </h1>\r\n            </div>\r\n            <div className=\"instructions\">\r\n                <h3>How to use this site</h3>\r\n                <p>On the next page you will have 4 inputs to search by. These inputs allow you to refine your search of the trivia questions by \r\n                    the value of the questions (from 100-500 in increments of 100), by the category ID of the questions, and by the earliest or by the latest date\r\n                    a question was shown based on the air date. \r\n                </p>\r\n                <p>Thanks for coming to the site! Click the button below to be taken to start searching!</p>\r\n                <div className=\"button\"><Link to=\"/search\" style={{ color: '#3393FF', fontSize: 24 }}> Enter </Link></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport './App.css';\nimport Search from './components/Search/Search';\nimport Header from './components/Header/Header';\nimport Results from './components/Results/Results'\nimport Homepage from './components/Homepage/Homepage'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      results : 'none', //becomes array with returned items from fetch call\n\n      value: '',      //keep track of search queries\n      category: '',\n      minDate: '',\n      maxDate: ''\n    }\n  }\n\n  getQuestions = (value, category, minDate, maxDate) => {\n    let queryString = '?';\n    let results = [];\n\n    //check to see if parameters are empty or undefined\n    const checkVal = (value === undefined || value === '');\n    const checkCategory = (category === undefined || category === '');\n    const checkMinDate = (minDate === undefined || minDate === '');\n    const checkMaxDate = (maxDate === undefined || maxDate === '');\n\n    //just entered search page so display none\n    if (value === undefined && category === undefined && minDate === undefined && maxDate === undefined){\n      queryString = '';\n      results = 'none';\n    }\n    else if (checkVal && checkCategory && checkMinDate && checkMaxDate) {\n      queryString = '';\n      results = 'none';\n    }\n    else { // build query string\n      results = [];\n      if (!checkVal){\n        queryString += 'value=' + value + '&';\n      }\n      if (!checkCategory){\n        queryString += 'category=' + category + '&';\n      }\n      if (!checkMinDate) {\n        queryString += 'min_date=' + minDate + '&';\n      }\n      if (!checkMaxDate) {\n        queryString += 'max_date=' + maxDate + '&';\n      }\n    }\n    \n    fetch(`http://jservice.io/api/clues${queryString}`)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          results: data,\n          value: value,\n          category: category,\n          minDate: minDate,\n          maxDate: maxDate\n        })\n      })\n      .catch(() => {\n        this.setState({\n          results: 'none',\n          value: value,\n          category: category,\n          minDate: minDate,\n          maxDate: maxDate\n        });\n      });\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Route path=\"/\" exact strict component={Homepage} />\n          <Route path=\"/search\" exact render={(props) => (\n            <div>\n              <Search getQuestions={this.getQuestions} {...props} />\n              <Results results={this.state.results} />\n            </div>\n          )} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}